<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Younger的个人站点</title>
  
  <subtitle>技术人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://youngerdev.com/"/>
  <updated>2019-05-30T00:24:17.130Z</updated>
  <id>http://youngerdev.com/</id>
  
  <author>
    <name>Younger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站优化</title>
    <link href="http://youngerdev.com/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96.html"/>
    <id>http://youngerdev.com/网站优化.html</id>
    <published>2019-05-30T00:11:39.000Z</published>
    <updated>2019-05-30T00:24:17.130Z</updated>
    
    <content type="html"><![CDATA[<p>网站在今年2月份就创建了，但是一直没有怎么优化。最近几天，简单美化了一下<br>现在就把相关的优化网站列一下，希望对读者有点帮助。</p><p><a href="https://www.lixint.me/hexo-blog.html" target="_blank" rel="noopener">Github Pages + Hexo 博客搭建，Next主题个性化修改</a> 有很多链接，包括从创建到优化，还有视频教程。</p><p><a href="https://www.lixint.me/hexo-theme-diy.html" target="_blank" rel="noopener">Hexo博客主题安装及Next主题个性化修改</a> 不得不说，这个对我帮助很大。</p><p><a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">hexo - Next 主题添加评论功能</a> 这个是给我们的网站加评论的， 我选择 <strong>Valine</strong> 评论系统 ，我希望可以匿名评论。</p><p>后续还有 seo 优化还没有做，这个会继续更新的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网站在今年2月份就创建了，但是一直没有怎么优化。最近几天，简单美化了一下&lt;br&gt;现在就把相关的优化网站列一下，希望对读者有点帮助。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lixint.me/hexo-blog.html&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://youngerdev.com/tags/hexo/"/>
    
      <category term="页面优化" scheme="http://youngerdev.com/tags/%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android中公共代码仓库与私服的使用</title>
    <link href="http://youngerdev.com/Android%E4%B8%AD%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E4%B8%8E%E7%A7%81%E6%9C%8D%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>http://youngerdev.com/Android中公共代码仓库与私服的使用.html</id>
    <published>2019-05-27T15:18:43.000Z</published>
    <updated>2019-05-29T15:34:30.358Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章 <a href="https://youngerdev.com/Android中SO文件使用.html">从ARM暂停与华为合作谈起 Android中SO兼容的那些事</a> 中提到了我们是用自己私服上的weex sdk 出的问题继而解决的问题,今天就来介绍下我们的私服, 并手把手教会你怎么创建并使用私服.</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着公司业务发展，项目越来越大，项目有好几个，项目虽然具体业务不同，但是其中也有很多相同的功能， 比如都有 weex 需求，网络请求、 图片处理、视频处理等等共同的需求，如果每个项目都重新写一遍，实现一遍，势必影响进度，重复造轮子的问题，项目进展缓慢，所以 就需要一种方式来避免这种重复劳动，彻底解决这种问题。</p><p><strong>解决办法</strong> : 使用组件化的思想， 把公共的组件抽离出来，和主项目的关系是依赖主项目的关系。module 是以 library的形式存在于整个project 中，依赖于主工程。在需要使用的时候，引入即可。<br>类似我们使用 recyclerview butterknife 之类的这些的功能， 这些内容有的是 Android官方提供的支持，有的是国内外优秀开发者开源出来的控件，我们可以很方便的集成到项目中。如下图：</p><p><a href="https://i.loli.net/2019/05/27/5cebf995ea1db50700.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf995ea1db50700.png" alt="仓库1.png"></a></p><h3 id="知名仓库介绍"><a href="#知名仓库介绍" class="headerlink" title="知名仓库介绍"></a>知名仓库介绍</h3><p>目前有 jcenter（） ，mavenCentral（）， google（） 等等仓库中心，这些仓库是用来保存代码的，组织或者个人开发者 开源出很多优秀的代码，工具，控件，上传到这些仓库中，我们可以通过 在 gradle 中配置相应的仓库地址 ，就可以方便使用相应的代码，</p><p>而内部使用的组件，不适合开源的可以自己搭建 私有仓库，内网使用，<br>还有一些需要借助代理访问，国内访问起来特别慢或者无法访问的内容，也可以上传到我们的私服上，能够很好地提高效率，减少同步等待时间<br>类似下图 我们在其中一个项目中使用的 仓库地址：</p><p><a href="https://i.loli.net/2019/05/27/5cebf995da23532578.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf995da23532578.png" alt="仓库2.png"></a></p><p>我们通过在 gradle 中配置相应的依赖，项目在 build 完成后就会将相应的 依赖工程代码 下载到 项目中， 可以在project 模式下 查看 External Libraries 看到实际下载下来的代码。</p><p><a href="https://i.loli.net/2019/05/27/5cebf9966676a13796.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf9966676a13796.png" alt="仓库3.png"></a></p><p>下面分别介绍下 这几个仓库，和私有仓库的搭建</p><h4 id="jcenter"><a href="#jcenter" class="headerlink" title="jcenter"></a>jcenter</h4><p>网页地址  <a href="http://jcenter.bintray.com/" target="_blank" rel="noopener">http://jcenter.bintray.com/</a></p><h4 id="mavenCentral"><a href="#mavenCentral" class="headerlink" title="mavenCentral"></a>mavenCentral</h4><p>网页地址<a href="http://central.maven.org/maven2/" target="_blank" rel="noopener">http://central.maven.org/maven2/</a></p><h4 id="google"><a href="#google" class="headerlink" title="google"></a>google</h4><p>网页地址  <a href="https://dl.google.com/dl/android/maven2/" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/</a></p><h4 id="其他仓库"><a href="#其他仓库" class="headerlink" title="其他仓库"></a>其他仓库</h4><p>以阿里云为例<br>网页地址 <a href="http://maven.aliyun.com/nexus/content/repositories/jcenter/" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/repositories/jcenter/</a></p><p>上图中已经展示了 在项目中的配置这些仓库的方式。</p><h3 id="这些仓库又有什么区别呢？"><a href="#这些仓库又有什么区别呢？" class="headerlink" title="这些仓库又有什么区别呢？"></a>这些仓库又有什么区别呢？</h3><p><strong>maven中央仓库</strong>（<a href="http://repo1.maven.org/maven2/）是由Sonatype公司提供的服务，它是Apache" target="_blank" rel="noopener">http://repo1.maven.org/maven2/）是由Sonatype公司提供的服务，它是Apache</a> Maven、SBT和其他构建系统的默认仓库，并能很容易被Apache Ant/Ivy、Gradle和其他工具所使用。开源组织例如Apache软件基金会、Eclipse基金会、JBoss和很多个人开源项目都将构件发布到中央仓库。 maven中央仓库已经将内容浏览功能禁掉了。</p><p><strong>jcenter仓库</strong>（<a href="https://jcenter.bintray.com" target="_blank" rel="noopener">https://jcenter.bintray.com</a> ）是由JFrog公司提供的Bintray中的Java仓库。它是当前世界上最大的Java和Android开源软件构件仓库。 所有内容都通过内容分发网络（CDN）使用加密https连接获取。JCenter是Goovy Grape内的默认仓库，Gradle内建支持（jcenter()仓库），非常易于在（可能除了Maven之外的）其他构建工具内进行配置。</p><p>JCenter相比mavenCenter构件更多，性能也更好。但还是有些构件仅存在mavenCenter中。</p><p><strong>google（）</strong>存储库是Google maven资源库的快捷方式。 它是在Gradle 4.x +中引入的。 使用的实际存储库URL是“<a href="https://dl.google.com/dl/android/maven2/”，" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/”，</a> 也可以使用 maven { url ‘<a href="https://maven.google.com&#39;" target="_blank" rel="noopener">https://maven.google.com&#39;</a> }<br>但是 google（），则需要Gradle 4.x +，Android Studio 3.x +和Android 3.x +的Gradle插件。</p><p><strong>maven (阿里云)</strong>  maven.aliyun.com代理了很多公共的maven仓库。使用maven.aliyun.com中的仓库地址作为下载源，速度更快更稳定。<br><a href="https://maven.aliyun.com/repository/public" target="_blank" rel="noopener">https://maven.aliyun.com/repository/public</a>   是 central仓和jcenter仓的聚合仓 经过测试发现，可以代替 central 和 jcenter ，把阿里云的这个放到第一位会加快同步速度。</p><p><a href="https://i.loli.net/2019/05/27/5cebf9966068b23466.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf9966068b23466.png" alt="仓库4.png"></a></p><p>阿里云除了代理了 mavenCentral, jcenter还有 上面的 google()  基本上主流的 仓库都有, 在国内这个网络环境下, 使用阿里云的代理仓库是一个挺好的选择.</p><h3 id="什么是Maven？"><a href="#什么是Maven？" class="headerlink" title="什么是Maven？"></a>什么是Maven？</h3><p>Maven 是一个项目管理和自动构建工具。是一个软件（特别是Java软件）项目管理以及自动构建工具，由Apache软件基金会所提供。是基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。<br>Maven也可以被利用与构建和管理各种项目，例如：C#、Ruby、Scala和其他语言编写的项目。<br>Maven项目使用项目对象模型（Project Object Modle，POM）来配置项目，对象模型存储在名为pom.xm的文件中。 </p><h3 id="什么是Gradle？"><a href="#什么是Gradle？" class="headerlink" title="什么是Gradle？"></a>什么是Gradle？</h3><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy（DSL语言，所谓的DSL是指这个语言应用在特定的领域，而类似Java这样是DCL语言，可以运用在普通的各个领域），而不是传统的xml语言，build脚本使用Groovy编写。当前支持的语言仅限于Java、Groovy、Scala、Kotlin。计划未来支持更多的语言。<br> Gradle改良了过去Maven、Ant带给开发者的问题，也已经成为Android Studio内置封装部署工具</p><h3 id="Android支持的Maven仓库："><a href="#Android支持的Maven仓库：" class="headerlink" title="Android支持的Maven仓库："></a>Android支持的Maven仓库：</h3><ul><li>1.mavenCentral 是最早的 maven 中央仓库</li><li>2.jcenter 是 Android Studio 0.8 版本起的默认 maven 中央仓库</li><li>3.本机的仓库</li><li>4.部署在内网服务器的私有仓库</li></ul><p>上面也说了，我们可以把自己写的优秀代码共享到这些代码仓库中供全世界 开发者使用，但是由于公司的项目很多不能公开，只可在公司范围使用，又需要在不同项目中可以方便接入，在后续功能修改时 又能通过版本控制 使用修改前后的功能均可正常使用， 这个时候可以 搭建私有 maven 仓库，部署我们的公共组件代码，就可以方便使用了。</p><h3 id="使用Nexus搭建-maven-私服"><a href="#使用Nexus搭建-maven-私服" class="headerlink" title="使用Nexus搭建 maven 私服"></a>使用Nexus搭建 maven 私服</h3><p>下面演示在window上的安装过程</p><h4 id="1-下载Nexus"><a href="#1-下载Nexus" class="headerlink" title="1.下载Nexus"></a>1.下载Nexus</h4><p>下载地址：<a href="http://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">http://www.sonatype.com/download-oss-sonatype</a><br><a href="https://i.loli.net/2019/05/27/5cebf99662a1697739.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf99662a1697739.png" alt="仓库5.png"></a></p><h4 id="2-解压zip文件，配置nexus下bin目录全局变量"><a href="#2-解压zip文件，配置nexus下bin目录全局变量" class="headerlink" title="2.解压zip文件，配置nexus下bin目录全局变量"></a>2.解压zip文件，配置nexus下bin目录全局变量</h4><p><a href="https://i.loli.net/2019/05/27/5cebf99587bb771985.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf99587bb771985.png" alt="仓库6.png"></a></p><p>然后打开我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量 </p><p>在path 中配置 上面的bin 文件夹的路径进去 F:\Downloads\nexus-3.16.1-02-win64\nexus-3.16.1-02\bin</p><h4 id="3-安装nexus服务，"><a href="#3-安装nexus服务，" class="headerlink" title="3.安装nexus服务，"></a>3.安装nexus服务，</h4><p>以管理员身份运行 cmd 进入 上面bin的文件夹下， 运行nexus.exe/install Nexus Service命令<br>查看服务里就能看到</p><p><a href="https://i.loli.net/2019/05/27/5cebf99540d6044503.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf99540d6044503.png" alt="仓库7.png"></a></p><h4 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务,"></a>4.启动服务,</h4><p>启动这个服务，稍等一会时间，在浏览器中访问 <a href="http://localhost:8081/。就能够看到这个页面" target="_blank" rel="noopener">http://localhost:8081/。就能够看到这个页面</a></p><p><a href="https://i.loli.net/2019/05/27/5cebf9954b73738490.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf9954b73738490.png" alt="仓库8.png"></a></p><p>默认的用户名和密码登录（admin/admin123） 目前为止 服务搭建成功。</p><p>仓库的详细配置过程，请移步到官方网站<br><a href="http://books.sonatype.com/nexus-book/reference3/admin.html#admin-repositories" target="_blank" rel="noopener">http://books.sonatype.com/nexus-book/reference3/admin.html#admin-repositories</a></p><p>下面来看怎么使用的问题；</p><h3 id="上传-aar-到我们搭建的私服上-步骤"><a href="#上传-aar-到我们搭建的私服上-步骤" class="headerlink" title="上传 aar 到我们搭建的私服上 步骤"></a>上传 aar 到我们搭建的私服上 步骤</h3><h4 id="1-Nexus创建自己的仓库"><a href="#1-Nexus创建自己的仓库" class="headerlink" title="1. Nexus创建自己的仓库"></a>1. Nexus创建自己的仓库</h4><p>访问：<a href="http://localhost:8081/nexus，" target="_blank" rel="noopener">http://localhost:8081/nexus，</a><br>先创建一个你要上传的仓库信息：</p><p><a href="https://i.loli.net/2019/05/27/5cebf995491f814187.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf995491f814187.png" alt="仓库9.png"></a></p><p>点击create repository   </p><p><a href="https://i.loli.net/2019/05/27/5cebf9952617494095.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebf9952617494095.png" alt="仓库10.png"></a></p><p><a href="https://i.loli.net/2019/05/27/5cebfb06469b367897.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebfb06469b367897.png" alt="仓库11.png"></a></p><p>name那输入你想创建的名称，如 younger<br>然后点创建，就可以看到了自己的仓库 <a href="http://10.1.1.147:8081/repository/younger/" target="_blank" rel="noopener">http://10.1.1.147:8081/repository/younger/</a>   （此ip为我自己电脑局域网ip）</p><h4 id="2-Android-Studio-配置"><a href="#2-Android-Studio-配置" class="headerlink" title="2. Android Studio 配置"></a>2. Android Studio 配置</h4><p>新建一个module，这个module就是你要编译的aar<br>module下gradle配置如下，<br>添加代码：<br>apply plugin:’maven’</p><p>和</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uploadArchives</span> &#123;</span><br><span class="line">    configuration = configurations.archives</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(url: <span class="string">'http://10.1.1.147:8081/repository/younger/'</span>) &#123;</span><br><span class="line">                authentication(userName: <span class="string">'admin'</span>, <span class="literal">password</span>: <span class="string">'admin123'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">pom</span>.<span class="keyword">project</span> &#123;</span><br><span class="line">                version <span class="string">'0.0.1'</span></span><br><span class="line">                artifactId <span class="string">'testmaven'</span></span><br><span class="line">                groupId <span class="string">'demo.younger.com'</span></span><br><span class="line">                packaging <span class="string">'aar'</span></span><br><span class="line">                <span class="literal">description</span> <span class="string">'update version 0.0.1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>groupId，version要注意填好。<br>然后，在Gradle projects列表中可以看到upload的Task<br>点击后即可编译上传，success后就可以了。</p><p><a href="https://i.loli.net/2019/05/27/5cebfb085bfe458955.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebfb085bfe458955.png" alt="仓库12.png"></a></p><p><a href="https://i.loli.net/2019/05/27/5cebfb095474414578.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebfb095474414578.png" alt="仓库13.png"></a></p><p>可以看到编译成功 ，在Nexus后台可以看到：<br><a href="https://i.loli.net/2019/05/27/5cebfb05d121946202.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebfb05d121946202.png" alt="仓库14.png"></a></p><h4 id="3-Android-Studio-中引用"><a href="#3-Android-Studio-中引用" class="headerlink" title="3. Android Studio 中引用"></a>3. Android Studio 中引用</h4><p>//添加仓库<br>在根gradle 中添加 </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">'http://10.1.1.147:8081/repository/younger/'</span>  </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在项目的gradle-中使用"><a href="#在项目的gradle-中使用" class="headerlink" title="在项目的gradle 中使用"></a>在项目的gradle 中使用</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implementation</span> <span class="string">'demo.younger.com:testmaven:0.0.1'</span></span><br></pre></td></tr></table></figure><p>就可以正常引用了， 可以看到上面的顺序是 groupId ：artifactId： version </p><p>也可以在   External Libraries  查看到</p><p><a href="https://i.loli.net/2019/05/27/5cebfb07f089a93771.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cebfb07f089a93771.png" alt="仓库15.png"></a></p><p>项目中也可以引用啦 </p><p>目前项目中weex就是采用这种方式， 搭建一个nexus 私服，把weex 官方的sdk 下载下来，我们根据项目需要，自行实现很多不同的功能，<br>而这些功能在不同的项目都可以用到，就统一放到私服上，在我们具体的项目中，只需要简单设置，就可以非常方便的使用这些功能，<br>如果新增了什么功能，可以直接把代码上传到公共组件中，升级版本， 项目中用的时候只需要改成相应的版本号就可以方便使用到最新的功能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以发现，创建私服，上传aar文件， 引用都非常简单， 具体有没有必要使用还是需要根据自身实际情况来看，那些公共仓库上的内容可以优先使用阿里云的代理仓库，这样会加快同步速度，自己内部使用或者比较特殊的内容就可以放到私服上了，同样是特别方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章 &lt;a href=&quot;https://youngerdev.com/Android中SO文件使用.html&quot;&gt;从ARM暂停与华为合作谈起 Android中SO兼容的那些事&lt;/a&gt; 中提到了我们是用自己私服上的weex sdk 出的问题继而解决的问题,今天就来介绍下我们
      
    
    </summary>
    
    
      <category term="Android私服" scheme="http://youngerdev.com/tags/Android%E7%A7%81%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>从ARM暂停与华为合作谈起 Android中SO兼容的那些事</title>
    <link href="http://youngerdev.com/Android%E4%B8%ADSO%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8.html"/>
    <id>http://youngerdev.com/Android中SO文件使用.html</id>
    <published>2019-05-08T15:18:03.000Z</published>
    <updated>2019-05-29T14:35:10.505Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为包含来自美国的技术，ARM（英国）已经要求员工“停止所有与华为及其子公司正在生效的合约、支持及未决约定”</p></blockquote><p>从最近的新闻来看，美国的贸易禁令使得华为公司腹背受敌，ARM彻底暂停与华为合作已成定局，最新款的芯片技术肯定是用不上了，不过华为已经获得了ARMv8的永久授权。但是ARM是什么样的存在？ 为什么对华为有这么大的影响力呢，事实上 ARM处理器 已经一统移动端了。今天就来谈谈 ARM 与 Android SO 的那些事。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h3><p>公司某项目新上功能部分页面使用 weex 来做的，测试过程中发现 weex 页面在某些手机上出现异常，经过排查定位到是 SO 库的问题，下面是这个问题的解决过程的一个记录，希望能对遇到类似问题的同学提供一些帮助。</p><h3 id="什么问题"><a href="#什么问题" class="headerlink" title="什么问题?"></a>什么问题?</h3><p>公司某项目 V1.2.0版本最初上线时，使用的 weex 是官方的 SDK 的接入方式， 接下来 App版本需要把官方的 SDK 替换成我们自己私服上的 SDK（因为私服上有我们针对自己项目需要，自定义了许多控件和公共组件） ，替换后，出现 weex 页面加载异常的问题（白屏）</p><p>报错信息如下：</p><p><a href="https://i.loli.net/2019/05/27/5cec05e1c1b9b32104.jpeg" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1c1b9b32104.jpeg" alt="so1.jpeg"></a></p><p>我们注意到，上面有一行错误是 invokeInitFramework java.lang.UnsatisfiedLinkError:    见过该错误的开发者都知道，这个是 JNI 相关的错误信息，根据错误信息能看到是 weex 相关的 JNI 调用出了问题，由JNI 又想到了 SO 库文件， 那就引出今天的话题。</p><h3 id="什么是-SO-文件及SO-应用？"><a href="#什么是-SO-文件及SO-应用？" class="headerlink" title="什么是 SO 文件及SO 应用？"></a>什么是 SO 文件及SO 应用？</h3><p>SO（shared object，共享库）是机器可以直接运行的二进制代码</p><ul><li><p>SO 机制让开发者最大化利用已有的 C 和 C++ 代码，达到复用的效果，利用软件世界积累了几十年的优秀代码；</p></li><li><p>SO 是二进制，没有解释编译的开销，用SO实现的功能比纯java实现的功能要快；</p></li><li><p>SO 内存分配不受 Dalivik/ART 的单个应用限制，减少 OOM；</p></li><li><p>相对于java代码，二进制代码的反编译难度更大，一些核心代码可以考虑放在 SO 中。</p></li></ul><p>在Android 中 提到 SO 就不能不提 ABI </p><h3 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h3><p>应用程序二进制接口（Application Binary Interface）</p><p>定义了其所对应的CPU架构能够执行的二进制文件（特别是.so文件）的格式规范。在 Android 系统上，不同 Android 手机使用不同的 CPU，因此支持不同的指令集。CPU 与指令集的每种组合都有其相应的应用二进制界面（或 ABI）。</p><p>ABI 可以非常精确地定义应用的机器代码在运行时如何与系统交互。 您必须为应用要使用的每个 CPU 架构指定 ABI：armeabi，armeabi-v7a，arm64-v8a，x86，x86_64，mips，mips64；</p><p>目前 Android 共支持七种不同类型的 CPU 架构，分别是：ARMv5，ARMv7 (从2010年起)，x86 (从2011年起)，MIPS (从2012年起)，ARMv8，MIPS64和x86_64 (从2014年起)</p><p><a href="https://i.loli.net/2019/05/27/5cec05ede59f285026.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05ede59f285026.png" alt="so11.png"></a></p><h3 id="SO（CPU）的兼容"><a href="#SO（CPU）的兼容" class="headerlink" title="SO（CPU）的兼容"></a>SO（CPU）的兼容</h3><p>每一个 CPU 架构对应一个 ABI，一个 CPU 属于某一种架构，多核 CPU 属于相同架构才能一起工作，很多设备仅支持一种 CPU 架构。</p><p>如果你要完美兼容所有类型的机型，理论上是要在的 libs 目录下放置各个架构平台的 SO 文件。</p><p>但项目体积也会变得非常庞大。是否一定需要带入这么多SO文件去兼容呢？答案是否定的。</p><p>根据目前Android共支持七种不同类型的CPU架构，其兼容特点可总结如下：</p><blockquote><p>armeabi设备只兼容armeabi；</p></blockquote><blockquote><p>armeabi-v7a设备兼容armeabi-v7a、armeabi；</p></blockquote><blockquote><p>arm64-v8a设备兼容arm64-v8a、armeabi-v7a、armeabi；</p></blockquote><blockquote><p>X86设备兼容X86、armeabi；</p></blockquote><blockquote><p>X86_64设备兼容X86_64、X86、armeabi；</p></blockquote><blockquote><p>mips64设备兼容mips64、mips；</p></blockquote><blockquote><p>mips只兼容mips；</p></blockquote><p>armeabi 的 SO 文件基本上可以说是兼容目前市面上的大部分手机，它能运行在除了mips和mips64的设备上，但在非 armeabi 设备上运行性能会有所损耗；</p><p>64位的CPU架构总能向下兼容其对应的32位指令集，如：x86_64兼容X86，arm64-v8a兼容armeabi-v7a，mips64兼容mips；</p><p>总结成一句话就是， 新的CPU 架构总能向下兼容；</p><p>所以知道这些信息后，查看公司其他项目怎么用的, 发现其他项目, 在 build.gradle 中关于 ndk.abiFilters  都是这样写的：</p><p><a href="https://i.loli.net/2019/05/27/5cec05e19113650893.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e19113650893.png" alt="so2.png"></a></p><p>而这个项目的写法是这样的：</p><p><a href="https://i.loli.net/2019/05/27/5cec05e1b164534030.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1b164534030.png" alt="so3.png"></a></p><p>区别就是这个 ndk.abiFilters  ， 既然这样写，必定有它的原因， 那就继续找，为什么要这么写，咨询相关的同事，了解到相关路径下的文件是 视频聊天、语音相关的 SO 库。</p><p>那能不能改成只支持 armeabi 或者 他们其中的部分呢。那就模拟这些情况，然后分别打出了这么多包（包的命名有点随意，这不是重点），分别在不同的手机上验证是否能正常加载 weex 。</p><p><a href="https://i.loli.net/2019/05/27/5cec05e1bda8e24077.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1bda8e24077.png" alt="so4.png"></a></p><p><a href="https://i.loli.net/2019/05/27/5cec05e1b944378415.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1b944378415.png" alt="so5.png"></a></p><p>经测试发现 armeabi 的和 armeabi +x86 的都可以正常加载 weex 页面，感觉问题这么简单就解决了，但是！！！</p><p>想到去掉这么多东西 会不会影响其他正常功能呢， 那就验证下吧，试了下视频相关功能，果不其然的 app 崩溃了。</p><p>说明上面的方向肯定是有问题，使用工具 Native libs Monitor  查看下Apk 中具体的SO 文件</p><p>首先查看下那些我们常用的App 是怎么做的，微信、QQ、支付宝等等</p><h3 id="其他公司如何适配的"><a href="#其他公司如何适配的" class="headerlink" title="其他公司如何适配的"></a>其他公司如何适配的</h3><ul><li><p>微信（只适配armeabi，有少量 v7a）；</p></li><li><p>qq（只适配armeabi，文件夹下有少量x86）；</p></li><li><p>百度地图（只适配armeabi）；</p></li><li><p>大众点评（只适配armeabi）；</p></li><li><p>google 家 （基本都是 arm64）； </p></li><li><p>支付宝 （基本都是 armeabi 的，2个x86的）；</p></li></ul><p>而且 公司别的项目App 中 用到的 face++ 的人脸识别，身份证识别 也是只提供了armeabi 的SO 文件</p><p>下图是微信的Apk 解压出的情况， 微信的lib下虽然只有armeabi-v7a一个目录，但目录内的文件仍放着v7a和 armeabi架构的SO文件，用于处理兼容带来的某些性能运算问题。</p><p><a href="https://i.loli.net/2019/05/27/5cec05ee064bf31381.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05ee064bf31381.png" alt="so12.png"></a></p><p>看完大公司的适配情况，然后看下我们自己 公司这几个项目，看看到底有什么区别， 还有上面打出的不同的包，相应的 SO 引入情况。</p><p>经过对比发现， 指定不同的 abi 会 在apk 中 打入相应 的文件(前提是 你有这些文件)，这就是一个过滤器，只在包中引入指定的cpu 架构的 SO 文件。</p><p><a href="https://i.loli.net/2019/05/27/5cec05e18f15246561.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e18f15246561.png" alt="so6.png"></a></p><p>既然重点是 weex 加载的出了问题，然后就重点查看 weex 相关的 SO 引入情况， 既然官方的可以正常使用， 我们私服上却出了问题，然后对比使用官方的 sdk 集成方式,和我们私服上的集成方式的 SO 库有什么不同；</p><p>如图是集成weex 官方sdk 的 APK<br><a href="https://i.loli.net/2019/05/27/5cec05e1c632040457.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1c632040457.png" alt="so7.png"></a></p><p>而集成私服上的 sdk 后，只在 armv5中有 libweexjsc.so 而 armv7 中是没有这个问题的。 区别找到了，那就去私服的项目中找原因<br><a href="https://i.loli.net/2019/05/27/5cec05e1a44a363699.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1a44a363699.png" alt="so8.png"></a></p><p>并没有 armeabi-v7a 的文件，相应的 lib下也没有相应的文件夹和文件，按照一样的写法，在这加入 armeabi-v7a 相应的路径，相应的 lib 下，也新建了相应的文件夹，放入相应的文件。重新编译</p><p><a href="https://i.loli.net/2019/05/27/5cec05e159f0b86317.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e159f0b86317.png" alt="so9.png"></a></p><p>再次尝试, 查看 lib 在 arm v7 和 v8a 的手机上,查看 lib 情况,发现, 在都能看到相应的 SO 文件了,</p><p>多部手机尝试， 视频聊天、语音、 weex 都正常、至此 问题得到解决。</p><p>在排查问题的过程中发现，其实这个项目 本来的 build.gradle 文件中的 arm64-v8a 写错了，以前写成了 armeabi-v8a 其实这样是无法使用到 arm64-v8a下的 so 的。</p><p>但是会向下兼容, 使用了 armeabi-v7a 中的文件，也没有报错，其实也是因祸得福，如果写正确的话，weex 在 arm64-v8a 也会加载失败，因为 官方也没有提供这样的一个文件夹和文件。</p><p>但是我们要怎么配置呢？</p><p>从目前移动端CPU市场的份额数据看，ARM架构几乎垄断，所以，除非你的用户很特殊，否则几乎可以不考虑单独编译带入X86、X86_64、mips、mips64架构SO文件。除去这四个架构之后，还要带入armeabi、armeabi-v7a、arm64-v8a 这三个不同类型，这对于一个拥有大量SO文件的应用来说，安装包的体积将会增大不少。</p><h3 id="针对不同平台，如何去适配，如何抉择"><a href="#针对不同平台，如何去适配，如何抉择" class="headerlink" title="针对不同平台，如何去适配，如何抉择"></a>针对不同平台，如何去适配，如何抉择</h3><p>目前主流的Android设备主要是 armeabi-v7a ARMv8 架构的，程序在运行的时候去加载不同平台对应的so，这是较为完美的一种解决方案，但是有时候为了减少包体积的大小，</p><p>不会同时设置 armeabi， armeabi-v7a 和 x86。根据不同的情况，可以进行不同的适配，</p><p>1.只适配 armeabi-v7a，因为目前主流机型是 ARMv7，并且 ARMv8 设备也向下兼容了armeabi-v7a， Facebook、WhatsApp、王者荣耀等就是只适配了armeabi-v7a。（Google play store下载 Native libs Monitor 进行查看）。</p><p>2.只适配 armeabi，因为 ARMv7 、ARMv8 还是 x86 都兼容 armeabi，但是性能都会有些损耗，例如ARMv7 支持硬件浮点运算等没法体现，x86 支持 armeabi 同样具有相应的损耗。</p><p>3.同时适配 armeabi-v7a 和 armeabi，既能够支持所有 ARM 架构，同时又能具有 ARMv7 支持硬件浮点运算等特性，例如Line等应用。</p><p>4.同时适配 x86 和 armeabi，既能支持所有 ARM 架构，又能支持x86架构，唯一的缺点就是没有了ARMv7 支持硬件浮点运算等一系列特性，例如QQ。</p><p>5.同时适配 armeabi， armeabi-v7a 和 x86，在性能方面来说是较为完美的方案，只是APK的大小也会随之变大。</p><p>6.还有其他的一些方案，例如微信只适配了armeabi，但是对于某些需要利用 ARMv7 支持硬件浮点运算等一系列特性的操作，在armeabi目录下存在v7对应的so文件，通过代码判断加载不同的so文件。即达到了减少APK大小的目的，又能达到适配ARMv7等架构以便使用其架构的一些新特性的目的。</p><p>就目前市场份额而言，绝大部分的设备都已经是armeabi-v7a、arm64-v8a，可以考虑只保留armeabi-v7a架构的SO文件，这样能获得更好的性能效果。所以我们的 这个项目选择采用第3种方案；<br><a href="https://i.loli.net/2019/05/27/5cec05e1321ca43637.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/05/27/5cec05e1321ca43637.png" alt="so10.png"></a></p><p>现在把这个项目中的 ndk.abiFilters 配置成上图所示，几乎覆盖所有机型，weex 能够正常加载，暂时没有发现影响其他功能，这个问题也算是得到解决。在不影响太多性能的情况下，也可以明显减少包的体积。</p><h3 id="总结下常见的-引入-so文件的错误"><a href="#总结下常见的-引入-so文件的错误" class="headerlink" title="总结下常见的 引入.so文件的错误"></a>总结下常见的 引入.so文件的错误</h3><h4 id="1-使用android高版本平台版本编译的-so文件运行在android低版本的设备上"><a href="#1-使用android高版本平台版本编译的-so文件运行在android低版本的设备上" class="headerlink" title="1.使用android高版本平台版本编译的.so文件运行在android低版本的设备上"></a>1.使用android高版本平台版本编译的.so文件运行在android低版本的设备上</h4><p>使用NDK时，你可能会倾向于使用最新的编译平台，但事实上这是错误的，因为NDK平台不是向下兼容的，而是向上兼容的。推荐使用app的minSdkVersion对应的编译平台。</p><p>这也意味着当你引入一个预编译好的.so文件时，你需要检查它编译时所用的平台版本。</p><h4 id="2-没有为每个支持的CPU架构提供对应的-so文件"><a href="#2-没有为每个支持的CPU架构提供对应的-so文件" class="headerlink" title="2.没有为每个支持的CPU架构提供对应的.so文件"></a>2.没有为每个支持的CPU架构提供对应的.so文件</h4><p>arm64-v8a是可以向下兼容的，但前提是你的项目里面没有arm64-v8a的文件夹，如果你有两个文件夹armeabi和arm64-v8a，两个文件夹，armeabi里面有a.so 和 b.so,arm64-v8a里面只有a.so，</p><p>那么arm64-v8a的手机在用到b的时候发现有arm64-v8a的文件夹，发现里面没有b.so，就报错了，</p><p>所以这个时候删掉arm64-v8a文件夹，这个时候手机发现没有适配arm64-v8a，就会直接去找armeabi的so库，或者把 arm64-v8a文件夹 的 b.so补齐。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://zhuanlan.zhihu.com/p/21302804" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21302804</a></p><p><a href="https://www.zhihu.com/question/36893314/answer/78467097" target="_blank" rel="noopener">https://www.zhihu.com/question/36893314/answer/78467097</a></p><p><a href="https://blog.csdn.net/zophar_development/article/details/84329054" target="_blank" rel="noopener">https://blog.csdn.net/zophar_development/article/details/84329054</a></p><p><a href="https://www.cnblogs.com/janehlp/p/7473240.html" target="_blank" rel="noopener">https://www.cnblogs.com/janehlp/p/7473240.html</a></p><p><a href="https://www.jianshu.com/p/cb05698a1968" target="_blank" rel="noopener">https://www.jianshu.com/p/cb05698a1968</a></p><p><a href="https://www.jianshu.com/p/cb15ba69fa89" target="_blank" rel="noopener">https://www.jianshu.com/p/cb15ba69fa89</a></p><p>等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;因为包含来自美国的技术，ARM（英国）已经要求员工“停止所有与华为及其子公司正在生效的合约、支持及未决约定”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从最近的新闻来看，美国的贸易禁令使得华为公司腹背受敌，ARM彻底暂停与华为合作已成定局，最新款的
      
    
    </summary>
    
    
      <category term="Android SO兼容" scheme="http://youngerdev.com/tags/Android-SO%E5%85%BC%E5%AE%B9/"/>
    
      <category term="SO" scheme="http://youngerdev.com/tags/SO/"/>
    
      <category term="华为" scheme="http://youngerdev.com/tags/%E5%8D%8E%E4%B8%BA/"/>
    
      <category term="arm" scheme="http://youngerdev.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://youngerdev.com/%E5%85%B3%E4%BA%8E%E6%88%91.html"/>
    <id>http://youngerdev.com/关于我.html</id>
    <published>2019-02-24T12:38:41.000Z</published>
    <updated>2019-05-30T00:24:24.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我的一些事"><a href="#关于我的一些事" class="headerlink" title="关于我的一些事"></a>关于我的一些事</h2><h4 id="我是15年本科毕业，2015年9月开始-目前一直从事Android开发-坐标北京；"><a href="#我是15年本科毕业，2015年9月开始-目前一直从事Android开发-坐标北京；" class="headerlink" title="我是15年本科毕业，2015年9月开始 目前一直从事Android开发,  坐标北京；"></a>我是15年本科毕业，2015年9月开始 目前一直从事Android开发,  坐标北京；</h4><h4 id="开发技能-：-Android-，Weex-，Kotlin"><a href="#开发技能-：-Android-，Weex-，Kotlin" class="headerlink" title="开发技能 ： Android ，Weex ，Kotlin"></a>开发技能 ： Android ，Weex ，Kotlin</h4><h4 id="本科不是-CS-专业，也算是半路出家，一路磕磕绊绊，到现在算是一个基本合格的API-Player。对计算机底层，数据结构、算法等这些难啃的骨头，心底感觉到畏惧，感觉太难了，心底有点怕。-但是-我认为-lt-数据结构和算法-gt-是一个合格的程序员的必要的基础知识-这个会让帮助更好设计程序-知道怎么用-也知道为什么要这么用，这样才能有更长久的发展；"><a href="#本科不是-CS-专业，也算是半路出家，一路磕磕绊绊，到现在算是一个基本合格的API-Player。对计算机底层，数据结构、算法等这些难啃的骨头，心底感觉到畏惧，感觉太难了，心底有点怕。-但是-我认为-lt-数据结构和算法-gt-是一个合格的程序员的必要的基础知识-这个会让帮助更好设计程序-知道怎么用-也知道为什么要这么用，这样才能有更长久的发展；" class="headerlink" title="本科不是 CS 专业，也算是半路出家，一路磕磕绊绊，到现在算是一个基本合格的API Player。对计算机底层，数据结构、算法等这些难啃的骨头，心底感觉到畏惧，感觉太难了，心底有点怕。 但是  我认为 &lt;数据结构和算法&gt; 是一个合格的程序员的必要的基础知识,这个会让帮助更好设计程序, 知道怎么用,也知道为什么要这么用，这样才能有更长久的发展；"></a>本科不是 CS 专业，也算是半路出家，一路磕磕绊绊，到现在算是一个基本合格的API Player。对计算机底层，数据结构、算法等这些难啃的骨头，心底感觉到畏惧，感觉太难了，心底有点怕。 但是  我认为 &lt;数据结构和算法&gt; 是一个合格的程序员的必要的基础知识,这个会让帮助更好设计程序, 知道怎么用,也知道为什么要这么用，这样才能有更长久的发展；</h4><p>看过的计算机书籍：</p><ul><li><a href="https://item.jd.com/12012505.html" target="_blank" rel="noopener">《第一行代码》</a></li><li><a href="https://item.jd.com/11758334.html" target="_blank" rel="noopener">《Android群英传》</a></li><li><a href="https://item.jd.com/11760209.html" target="_blank" rel="noopener">《Android开发艺术探索》</a></li><li><a href="https://item.jd.com/12125491.html" target="_blank" rel="noopener">《Android进阶之光》</a></li><li><a href="https://item.jd.com/11999029.html" target="_blank" rel="noopener">《Android高级进阶》</a></li><li><a href="https://item.jd.com/10663703.html" target="_blank" rel="noopener">《大话数据结构》</a></li></ul><p>订阅的专栏：</p><ul><li><a href="https://xiaozhuanlan.com/" target="_blank" rel="noopener">《小专栏》</a></li><li><a href="https://i.loli.net/2019/02/24/5c729c4081309.jpeg" title="数据结构和算法之美" target="_blank" rel="noopener">《数据结构和算法之美》</a></li><li><a href="https://i.loli.net/2019/02/24/5c729d228f471.jpeg" target="_blank" rel="noopener">《Android开发高手课》</a></li><li><a href="https://i.loli.net/2019/02/24/5c729d7f64790.jpeg" target="_blank" rel="noopener">《左耳听风》</a></li></ul><p>还有好多大神的技术博客， 但是技术这个东西，如果不能经常使用，会比较容易忘，需要多动手去实践，最好是将自己学到的知识，用自己的语言讲述一遍出来，实践后写出来，这样会记得比较牢，有条件的可以在小组，公司或者更大范围分享出来，大家一起讨论，这样会加深记忆。 建立这个博客其实也是希望自己能分享出点什么内容，API Player 太没有水平了， 不能止步于此吧，一个技术人要有技术追求。在大环境不太好的情况下，沉下心来，丰富自己，多学习，多输出，才能在寒冬中让自己走的更稳。共勉吧，朋友们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于我的一些事&quot;&gt;&lt;a href=&quot;#关于我的一些事&quot; class=&quot;headerlink&quot; title=&quot;关于我的一些事&quot;&gt;&lt;/a&gt;关于我的一些事&lt;/h2&gt;&lt;h4 id=&quot;我是15年本科毕业，2015年9月开始-目前一直从事Android开发-坐标北京；&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Android" scheme="http://youngerdev.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>开站顺利</title>
    <link href="http://youngerdev.com/%E5%BC%80%E7%AB%99%E9%A1%BA%E5%88%A9.html"/>
    <id>http://youngerdev.com/开站顺利.html</id>
    <published>2019-02-18T14:12:37.000Z</published>
    <updated>2019-05-29T14:33:33.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是Younger-的第一篇内容"><a href="#这是Younger-的第一篇内容" class="headerlink" title="这是Younger 的第一篇内容"></a>这是Younger 的第一篇内容</h2><p><strong>终于我也有自己的个人网站了</strong></p><p>昨天是周日,下午开始弄这个,<strong>申请域名</strong>, <strong>搭建网站</strong>,整个过程真的好简单,以前一直以为很难的,就一直没有动手的去弄; 目前来看, <strong>困难都是自己想象出来的, 真正动手去做,就会发现,也没有那么难,真正需要做的就是行动, 勇敢踏出第一步</strong></p><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>域名是在  <a href="https://new.namesilo.com/" target="_blank" rel="noopener">namesilo</a> 买的, 用了优惠码后一年也就是不到50元,支持支付宝支付,方便至极 ,如果有需要可以寻找网上的优惠码, 可以节省1美元, 我这个域名买下来一年5.99美元,也就是不到45块钱,可谓是相当的划算了.</p><p>关于域名商的选择我也是查了下资料, 之所以没有选择国内的服务商, 主要是众所周知的原因, 国内的需要备案, 且你的域名随时可能被关掉等不安全因素,  还是在国际知名的大的域名商买比较靠谱, namesilo 这个打的广告比较少, 说是让利给消费者, 的确是很便宜,  我是对比了多家, 发现这家便宜的, 还有 <a href="www.namecheap.com">namecheap</a> 也比较便宜. 这个还是见仁见智了, 想买哪个都行, 续费便宜, 服务好就行.</p><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><p>使用的是 github.io + hexo 搭建的,<br>过程非常的简单, 感谢各位大佬的<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">教程</a></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网的文档</a> 也很详细,还有视频教程,<br>另外还有好多主题供选择; 傻瓜式安装.每一步都有详细的教程, 然后就成了我现在弄的这个样子, 后续我肯定还会继续更新的.</p><p>今天简单弄了一下,记录一下, 虽然用的也都是别人的轮子,但还是很开心呀!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;这是Younger-的第一篇内容&quot;&gt;&lt;a href=&quot;#这是Younger-的第一篇内容&quot; class=&quot;headerlink&quot; title=&quot;这是Younger 的第一篇内容&quot;&gt;&lt;/a&gt;这是Younger 的第一篇内容&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;终于我也有自
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://youngerdev.com/tags/hexo/"/>
    
      <category term="网站搭建" scheme="http://youngerdev.com/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
      <category term="域名购买" scheme="http://youngerdev.com/tags/%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0/"/>
    
      <category term="github" scheme="http://youngerdev.com/tags/github/"/>
    
      <category term="namesilo" scheme="http://youngerdev.com/tags/namesilo/"/>
    
  </entry>
  
</feed>
